{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\React\\\\my_app\\\\src\\\\Components\\\\Unity\\\\TopDownAction.js\",\n  _s = $RefreshSig$();\nimport { Unity, useUnityContext } from \"react-unity-webgl\";\nimport { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\n// 게임을 로드할 화면을 만듬\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n    width: 1920px;\n    height: 800px;\n    margin: auto;\n    display: flex;\n    flex-direction: row;\n`;\n\n// 게임을 로드할 화면을 만듬\n_c = Container;\nconst UnityBox = styled.div`\n    width: 600px;\n    height: 350px;\n    margin-left: 40px;\n    margin-right: 10px;\n    margin-bottom: 350px;\n    border: 1px solid gray;\n`;\n\n// 게임을 로드할 화면을 만듬\n_c2 = UnityBox;\nconst WebBox = styled.div`\n    width: 1200px;\n    height: 800px;\n    margin-left: 10px;\n    border: 1px solid gray;\n`;\n_c3 = WebBox;\nexport function TopDownAction() {\n  _s();\n  // const { unityProvider } = useUnityContext({\n  //     loaderUrl: \"build/myunityapp.loader.js\",\n  //     dataUrl: \"build/myunityapp.data\",\n  //     frameworkUrl: \"build/myunityapp.framework.js\",\n  //     codeUrl: \"build/myunityapp.wasm\",\n  // });\n\n  const [playingGame, setPlayingGame] = useState(false);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [userName, setUserName] = useState();\n  const [score, setScore] = useState();\n\n  // React 에서 Unity 로 sendMessage 를 통해 전달하기\n  const {\n    unityProvider,\n    sendMessage,\n    addEventListener,\n    removeEventListener\n  } = useUnityContext({\n    loaderUrl: \"build/Build.loader.js\",\n    dataUrl: \"build/Build.data\",\n    frameworkUrl: \"build/Build.framework.js\",\n    codeUrl: \"build/Build.wasm\"\n  });\n  function handleGameOver(userName, score) {\n    setIsGameOver(true);\n    setUserName(userName);\n    setScore(score);\n  }\n  useEffect(() => {\n    addEventListener(\"GameOver\", handleGameOver);\n    return () => {\n      removeEventListener(\"GameOver\", handleGameOver);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Top Down Action Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        backgroundColor: \"blue\",\n        color: \"white\",\n        margin: \"10px 10px 10px 10px\",\n        padding: \"10px\",\n        border: \"none\",\n        borderRadius: \"5px\"\n      },\n      onClick: () => setPlayingGame(true),\n      children: \"Start Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        backgroundColor: \"blue\",\n        color: \"white\",\n        margin: \"10px\",\n        padding: \"10px\",\n        border: \"none\",\n        borderRadius: \"5px\"\n      },\n      onClick: () => sendMessage(\"Player\", \"Attack\"),\n      children: \"Attack\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(UnityBox, {\n        children: playingGame ? /*#__PURE__*/_jsxDEV(Unity, {\n          unityProvider: unityProvider,\n          style: {\n            width: \"100%\",\n            height: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(WebBox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), isGameOver === true && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: `Game Over ${userName}! You've scored ${score} points.`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n_s(TopDownAction, \"X6Ch7sU7QW5YEdKRt8zvgRjdyeE=\", false, function () {\n  return [useUnityContext];\n});\n_c4 = TopDownAction;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"UnityBox\");\n$RefreshReg$(_c3, \"WebBox\");\n$RefreshReg$(_c4, \"TopDownAction\");","map":{"version":3,"names":["Unity","useUnityContext","useState","useEffect","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","Container","div","_c","UnityBox","_c2","WebBox","_c3","TopDownAction","_s","playingGame","setPlayingGame","isGameOver","setIsGameOver","userName","setUserName","score","setScore","unityProvider","sendMessage","addEventListener","removeEventListener","loaderUrl","dataUrl","frameworkUrl","codeUrl","handleGameOver","children","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","color","margin","padding","border","borderRadius","onClick","width","height","_c4","$RefreshReg$"],"sources":["C:/Users/admin/Documents/GitHub/React/my_app/src/Components/Unity/TopDownAction.js"],"sourcesContent":["import { Unity, useUnityContext } from \"react-unity-webgl\";\r\nimport { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n// 게임을 로드할 화면을 만듬\r\nconst Container = styled.div`\r\n    width: 1920px;\r\n    height: 800px;\r\n    margin: auto;\r\n    display: flex;\r\n    flex-direction: row;\r\n`;\r\n\r\n// 게임을 로드할 화면을 만듬\r\nconst UnityBox = styled.div`\r\n    width: 600px;\r\n    height: 350px;\r\n    margin-left: 40px;\r\n    margin-right: 10px;\r\n    margin-bottom: 350px;\r\n    border: 1px solid gray;\r\n`;\r\n\r\n// 게임을 로드할 화면을 만듬\r\nconst WebBox = styled.div`\r\n    width: 1200px;\r\n    height: 800px;\r\n    margin-left: 10px;\r\n    border: 1px solid gray;\r\n`;\r\n\r\nexport function TopDownAction() {\r\n    // const { unityProvider } = useUnityContext({\r\n    //     loaderUrl: \"build/myunityapp.loader.js\",\r\n    //     dataUrl: \"build/myunityapp.data\",\r\n    //     frameworkUrl: \"build/myunityapp.framework.js\",\r\n    //     codeUrl: \"build/myunityapp.wasm\",\r\n    // });\r\n\r\n    const [playingGame, setPlayingGame] = useState(false);\r\n\r\n    const [isGameOver, setIsGameOver] = useState(false);\r\n    const [userName, setUserName] = useState();\r\n    const [score, setScore] = useState();\r\n\r\n    // React 에서 Unity 로 sendMessage 를 통해 전달하기\r\n    const {\r\n        unityProvider,\r\n        sendMessage,\r\n        addEventListener,\r\n        removeEventListener,\r\n    } = useUnityContext({\r\n        loaderUrl: \"build/Build.loader.js\",\r\n        dataUrl: \"build/Build.data\",\r\n        frameworkUrl: \"build/Build.framework.js\",\r\n        codeUrl: \"build/Build.wasm\",\r\n    });\r\n\r\n    function handleGameOver(userName, score) {\r\n        setIsGameOver(true);\r\n        setUserName(userName);\r\n        setScore(score);\r\n    }\r\n\r\n    useEffect(() => {\r\n        addEventListener(\"GameOver\", handleGameOver);\r\n        return () => {\r\n            removeEventListener(\"GameOver\", handleGameOver);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <h1>Top Down Action Game</h1>\r\n            <button\r\n                style={{\r\n                    backgroundColor: \"blue\",\r\n                    color: \"white\",\r\n                    margin: \"10px 10px 10px 10px\",\r\n                    padding: \"10px\",\r\n                    border: \"none\",\r\n                    borderRadius: \"5px\",\r\n                }}\r\n                onClick={() => setPlayingGame(true)}\r\n            >\r\n                Start Game\r\n            </button>\r\n            <button\r\n                style={{\r\n                    backgroundColor: \"blue\",\r\n                    color: \"white\",\r\n                    margin: \"10px\",\r\n                    padding: \"10px\",\r\n                    border: \"none\",\r\n                    borderRadius: \"5px\",\r\n                }}\r\n                onClick={() => sendMessage(\"Player\", \"Attack\")}\r\n            >\r\n                Attack\r\n            </button>\r\n            <Container>\r\n                <UnityBox>\r\n                    {playingGame ? (\r\n                        <Unity\r\n                            unityProvider={unityProvider}\r\n                            style={{\r\n                                width: \"100%\",\r\n                                height: \"100%\",\r\n                            }}\r\n                        />\r\n                    ) : null}\r\n                </UnityBox>\r\n                <WebBox></WebBox>\r\n            </Container>\r\n\r\n            {/* // Unity 에서 게임오버 메시지를 받으면 출력후 종료 */}\r\n            {isGameOver === true && (\r\n                <p>{`Game Over ${userName}! You've scored ${score} points.`}</p>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}