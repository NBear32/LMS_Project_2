{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\React\\\\my_app\\\\src\\\\Components\\\\240724\\\\OpenWeather.js\",\n  _s = $RefreshSig$();\nimport styled from \"styled-components\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n_c = Container;\nconst Card = styled.div`\n    width: 500px;\n    height: 300px;\n    // 웹페이지 색은 단색 보다는 gradient 가 좋음\n    // background: linear-gradient(90deg, lightblue, dodgerblue);\n    background: linear-gradient(90deg, #ff7e5f, #feb47b);\n    color: white;\n    border-radius: 10px; // 모서리 라운드\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n`;\n_c2 = Card;\nconst Icon = styled.div`\n    text-align: center;\n    img {\n        width: 100%;\n        margin-top: 20px;\n    }\n`;\n_c3 = Icon;\nconst Weather = styled.div`\n    display: flex;\n    flex-direction: column;\n    text-align: end; // 오른쪽 정렬\n    padding-right: 20px;\n`;\n_c4 = Weather;\nconst Temp = styled.div`\n    margin-top: 20px;\n    font-size: 5rem;\n    i {\n        font-size: 3.5rem;\n    }\n`;\n_c5 = Temp;\nconst City = styled.div`\n    font-size: 2.5rem;\n`;\n_c6 = City;\nconst Info = styled.div`\n    font-size: 1.5rem;\n    margin-top: 30px;\n`;\n_c7 = Info;\nexport function OpenWeather() {\n  _s();\n  const API_KEY = \"b5c0480ce07be15b9bd84a3754bee904\";\n  const [icon, setIcon] = useState(\"\");\n  const [temp, setTemp] = useState(0);\n  const [city, setCity] = useState(\"\");\n  const [weather, setWeather] = useState(\"\");\n\n  // // useEffect 를 사용 빈 배열 처리를 해야 처음 한번만 처리됨\n  // useEffect(() => {\n  //     setIcon(\"@4d\");\n  //     setTemp(28);\n  //     setCity(\"Daejeon\");\n  //     setWeather(\"Clouds\");\n  // }, []);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(geoOK, geoError);\n  }, []); // 최초 1회만\n\n  function geoOK(position) {\n    const lat = position.coords.latitude;\n    const lon = position.coords.longitude;\n    const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n\n    // 1. Axios 사용법(Async ~ await어씽크어웨이크\n\n    // 2. Axios 사용법(Promise ~ then)\n    // axios\n    //     .get(url)\n    //     .then((response) => {\n    //         const data = response.data;\n\n    //         console.log(data);\n    //         setCity(data.name);\n    //         setTemp(parseInt(data.main.temp));\n    //         setIcon(data.weather[0].icon);\n    //         setWeather(data.weather[0].main);\n    //     })\n    //     .catch((error) => {\n    //         console.log(\"요청이 실패했습니다.\", error);\n    //     });\n\n    // 오래된 버전에서는 지원 안할수 있음\n    // 3. fetch 사용법\n    // fetch(url)\n    //     .then((response) => {\n    //         return response.json();\n    //     })\n    //     .then((data) => {\n    //         console.log(data);\n    //         setCity(data.name);\n    //         setTemp(parseInt(data.main.temp));\n    //         setIcon(data.weather[0].icon);\n    //         setWeather(data.weather[0].main);\n    //     })\n    //     .catch((error) => {\n    //         console.log(\"요청이 실패했습니다.\", error);\n    //     });\n  }\n  function geoError() {\n    alert(\"현재 위치정보를 찾을 수 없습니다.\");\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(Icon, {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `https://openweathermap.org/img/wn/${icon}@2x.png`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Weather, {\n          children: [/*#__PURE__*/_jsxDEV(Temp, {\n            children: [temp, /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"ti ti-temperature-celsius\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(City, {\n            children: city\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Info, {\n            children: weather\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(OpenWeather, \"+gnb5LUB4X7d2PQI3mYqNUCzOVY=\");\n_c8 = OpenWeather;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Card\");\n$RefreshReg$(_c3, \"Icon\");\n$RefreshReg$(_c4, \"Weather\");\n$RefreshReg$(_c5, \"Temp\");\n$RefreshReg$(_c6, \"City\");\n$RefreshReg$(_c7, \"Info\");\n$RefreshReg$(_c8, \"OpenWeather\");","map":{"version":3,"names":["styled","useEffect","useState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Container","div","_c","Card","_c2","Icon","_c3","Weather","_c4","Temp","_c5","City","_c6","Info","_c7","OpenWeather","_s","API_KEY","icon","setIcon","temp","setTemp","city","setCity","weather","setWeather","navigator","geolocation","getCurrentPosition","geoOK","geoError","position","lat","coords","latitude","lon","longitude","url","alert","children","src","fileName","_jsxFileName","lineNumber","columnNumber","className","_c8","$RefreshReg$"],"sources":["C:/Users/admin/Documents/GitHub/React/my_app/src/Components/240724/OpenWeather.js"],"sourcesContent":["import styled from \"styled-components\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst Container = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nconst Card = styled.div`\r\n    width: 500px;\r\n    height: 300px;\r\n    // 웹페이지 색은 단색 보다는 gradient 가 좋음\r\n    // background: linear-gradient(90deg, lightblue, dodgerblue);\r\n    background: linear-gradient(90deg, #ff7e5f, #feb47b);\r\n    color: white;\r\n    border-radius: 10px; // 모서리 라운드\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n`;\r\n\r\nconst Icon = styled.div`\r\n    text-align: center;\r\n    img {\r\n        width: 100%;\r\n        margin-top: 20px;\r\n    }\r\n`;\r\n\r\nconst Weather = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    text-align: end; // 오른쪽 정렬\r\n    padding-right: 20px;\r\n`;\r\n\r\nconst Temp = styled.div`\r\n    margin-top: 20px;\r\n    font-size: 5rem;\r\n    i {\r\n        font-size: 3.5rem;\r\n    }\r\n`;\r\n\r\nconst City = styled.div`\r\n    font-size: 2.5rem;\r\n`;\r\n\r\nconst Info = styled.div`\r\n    font-size: 1.5rem;\r\n    margin-top: 30px;\r\n`;\r\n\r\nexport function OpenWeather() {\r\n    const API_KEY = \"b5c0480ce07be15b9bd84a3754bee904\";\r\n\r\n    const [icon, setIcon] = useState(\"\");\r\n    const [temp, setTemp] = useState(0);\r\n    const [city, setCity] = useState(\"\");\r\n    const [weather, setWeather] = useState(\"\");\r\n\r\n    // // useEffect 를 사용 빈 배열 처리를 해야 처음 한번만 처리됨\r\n    // useEffect(() => {\r\n    //     setIcon(\"@4d\");\r\n    //     setTemp(28);\r\n    //     setCity(\"Daejeon\");\r\n    //     setWeather(\"Clouds\");\r\n    // }, []);\r\n\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(geoOK, geoError);\r\n    }, []); // 최초 1회만\r\n\r\n    function geoOK(position) {\r\n        const lat = position.coords.latitude;\r\n        const lon = position.coords.longitude;\r\n        const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\r\n\r\n        // 1. Axios 사용법(Async ~ await어씽크어웨이크\r\n\r\n\r\n\r\n\r\n\r\n        // 2. Axios 사용법(Promise ~ then)\r\n        // axios\r\n        //     .get(url)\r\n        //     .then((response) => {\r\n        //         const data = response.data;\r\n\r\n        //         console.log(data);\r\n        //         setCity(data.name);\r\n        //         setTemp(parseInt(data.main.temp));\r\n        //         setIcon(data.weather[0].icon);\r\n        //         setWeather(data.weather[0].main);\r\n        //     })\r\n        //     .catch((error) => {\r\n        //         console.log(\"요청이 실패했습니다.\", error);\r\n        //     });\r\n\r\n        // 오래된 버전에서는 지원 안할수 있음\r\n        // 3. fetch 사용법\r\n        // fetch(url)\r\n        //     .then((response) => {\r\n        //         return response.json();\r\n        //     })\r\n        //     .then((data) => {\r\n        //         console.log(data);\r\n        //         setCity(data.name);\r\n        //         setTemp(parseInt(data.main.temp));\r\n        //         setIcon(data.weather[0].icon);\r\n        //         setWeather(data.weather[0].main);\r\n        //     })\r\n        //     .catch((error) => {\r\n        //         console.log(\"요청이 실패했습니다.\", error);\r\n        //     });\r\n    }\r\n\r\n    function geoError() {\r\n        alert(\"현재 위치정보를 찾을 수 없습니다.\");\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                {/* 왼쪽 아이콘, 오른쪽 위 온도, 아래 도시 */}\r\n                <Card>\r\n                    <Icon>\r\n                        <img\r\n                            src={`https://openweathermap.org/img/wn/${icon}@2x.png`}\r\n                        />\r\n                    </Icon>\r\n                    <Weather>\r\n                        <Temp>\r\n                            {temp}\r\n                            <i className=\"ti ti-temperature-celsius\"></i>\r\n                        </Temp>\r\n                        <City>{city}</City>\r\n                        <Info>{weather}</Info>\r\n                    </Weather>\r\n                </Card>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}