{"ast":null,"code":"import axios from \"axios\";\nconst headers = {\n  headers: {\n    accept: \"appplication/json\",\n    Authorization: \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJlY2NkOTBlY2Y1NTU2ZmQxOTRlN2IxOTc1NDA2MjQ5NSIsIm5iZiI6MTcyMTg4MzA5Ni4xNzA4NzcsInN1YiI6IjY2YTFjYWUzYzhiYmEzMTJlMzcyY2Y5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.fkE0U7_iqbBmAomAP88d8zeaugpk369fcjfFSSGOCFU\"\n  }\n};\nexport const IMG_PATH = \"https://image.tmdb.org/t/p/original\";\nexport function getAllLectures() {\n  return axios.get(\"https://api.themoviedb.org/3/movie/now_playing?language=ko-KR&page=1\", headers);\n}\nexport function getRecommendedLectures() {\n  return axios.get(\"https://api.themoviedb.org/3/movie/popular?language=ko-KR&page=1\", headers);\n}\nexport function getFreeLectures() {\n  return axios.get(\"https://api.themoviedb.org/3/movie/top_rated?language=ko-KR&page=1\", headers);\n}\nexport function getPaidLectures() {\n  return axios.get(\"https://api.themoviedb.org/3/movie/upcoming?language=ko-KR&page=1\", headers);\n}\nexport function getNewLectures() {\n  return axios.get(\"https://api.themoviedb.org/3/movie/upcoming?language=ko-KR&page=1\", headers);\n}\nexport function getMovieDetailById(id) {\n  return axios.get(`https://api.themoviedb.org/3/movie/${id}?language=ko-KR`, headers);\n}\nexport function getMovieCreditById(id) {\n  return axios.get(`https://api.themoviedb.org/3/movie/${id}/credits?language=ko-KR`, headers);\n}\nexport function searchMoviesByKeyword(inputValue) {\n  return axios.get(`https://api.themoviedb.org/3/search/movie?query=${inputValue}&include_adult=false&language=ko-KR&page=1`, headers);\n}\nexport let genre = [];\nexport async function setGenreListOfMovie() {\n  // 로컬스토리지에 장르리스트가 있으면 그걸 사용\n  genre = JSON.parse(localStorage.getItem(\"MovieGenreList\"));\n\n  // 없으면 api로 받아와서 로컬스토리지에 저장하고 사용\n  if (!genre) {\n    try {\n      const response = await axios.get(\"https://api.themoviedb.org/3/genre/movie/list?language=ko-KR\", headers);\n      genre = response.data.genres;\n      localStorage.setItem(\"MovieGenreList\", JSON.stringify(genre));\n    } catch (error) {\n      console.log(\"Error\", error);\n    }\n  }\n}\n\n// list 는 장르의 숫자만 담겨 있음\nexport function getGenre(list) {\n  return list.map(id => {\n    const temp = genre.find(g => g.id === id);\n    return temp ? temp.name : \"\"; // temp.name 이 null 이면 에러\n  }).filter(name => name) // 있는 데이터만 filter 에 담음\n  .join(\", \");\n}","map":{"version":3,"names":["axios","headers","accept","Authorization","IMG_PATH","getAllLectures","get","getRecommendedLectures","getFreeLectures","getPaidLectures","getNewLectures","getMovieDetailById","id","getMovieCreditById","searchMoviesByKeyword","inputValue","genre","setGenreListOfMovie","JSON","parse","localStorage","getItem","response","data","genres","setItem","stringify","error","console","log","getGenre","list","map","temp","find","g","name","filter","join"],"sources":["C:/Users/admin/Documents/GitHub/React/lms_app/src/Components/LMS/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst headers = {\r\n    headers: {\r\n        accept: \"appplication/json\",\r\n        Authorization:\r\n            \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJlY2NkOTBlY2Y1NTU2ZmQxOTRlN2IxOTc1NDA2MjQ5NSIsIm5iZiI6MTcyMTg4MzA5Ni4xNzA4NzcsInN1YiI6IjY2YTFjYWUzYzhiYmEzMTJlMzcyY2Y5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.fkE0U7_iqbBmAomAP88d8zeaugpk369fcjfFSSGOCFU\",\r\n    },\r\n};\r\n\r\nexport const IMG_PATH = \"https://image.tmdb.org/t/p/original\";\r\n\r\nexport function getAllLectures() {\r\n    return axios.get(\r\n        \"https://api.themoviedb.org/3/movie/now_playing?language=ko-KR&page=1\",\r\n        headers\r\n    );\r\n}\r\n\r\nexport function getRecommendedLectures() {\r\n    return axios.get(\r\n        \"https://api.themoviedb.org/3/movie/popular?language=ko-KR&page=1\",\r\n        headers\r\n    );\r\n}\r\n\r\nexport function getFreeLectures() {\r\n    return axios.get(\r\n        \"https://api.themoviedb.org/3/movie/top_rated?language=ko-KR&page=1\",\r\n        headers\r\n    );\r\n}\r\n\r\nexport function getPaidLectures() {\r\n    return axios.get(\r\n        \"https://api.themoviedb.org/3/movie/upcoming?language=ko-KR&page=1\",\r\n        headers\r\n    );\r\n}\r\n\r\nexport function getNewLectures() {\r\n    return axios.get(\r\n        \"https://api.themoviedb.org/3/movie/upcoming?language=ko-KR&page=1\",\r\n        headers\r\n    );\r\n}\r\n\r\nexport function getMovieDetailById(id) {\r\n    return axios.get(\r\n        `https://api.themoviedb.org/3/movie/${id}?language=ko-KR`,\r\n        headers\r\n    );\r\n}\r\n\r\nexport function getMovieCreditById(id) {\r\n    return axios.get(\r\n        `https://api.themoviedb.org/3/movie/${id}/credits?language=ko-KR`,\r\n        headers\r\n    );\r\n}\r\n\r\nexport function searchMoviesByKeyword(inputValue) {\r\n    return axios.get(\r\n        `https://api.themoviedb.org/3/search/movie?query=${inputValue}&include_adult=false&language=ko-KR&page=1`,\r\n        headers\r\n    );\r\n}\r\n\r\nexport let genre = [];\r\n\r\nexport async function setGenreListOfMovie() {\r\n    // 로컬스토리지에 장르리스트가 있으면 그걸 사용\r\n    genre = JSON.parse(localStorage.getItem(\"MovieGenreList\"));\r\n\r\n    // 없으면 api로 받아와서 로컬스토리지에 저장하고 사용\r\n    if (!genre) {\r\n        try {\r\n            const response = await axios.get(\r\n                \"https://api.themoviedb.org/3/genre/movie/list?language=ko-KR\",\r\n                headers\r\n            );\r\n            genre = response.data.genres;\r\n            localStorage.setItem(\"MovieGenreList\", JSON.stringify(genre));\r\n        } catch (error) {\r\n            console.log(\"Error\", error);\r\n        }\r\n    }\r\n}\r\n\r\n// list 는 장르의 숫자만 담겨 있음\r\nexport function getGenre(list) {\r\n    return list\r\n        .map((id) => {\r\n            const temp = genre.find((g) => g.id === id);\r\n            return temp ? temp.name : \"\"; // temp.name 이 null 이면 에러\r\n        })\r\n        .filter((name) => name) // 있는 데이터만 filter 에 담음\r\n        .join(\", \");\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG;EACZA,OAAO,EAAE;IACLC,MAAM,EAAE,mBAAmB;IAC3BC,aAAa,EACT;EACR;AACJ,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG,qCAAqC;AAE7D,OAAO,SAASC,cAAcA,CAAA,EAAG;EAC7B,OAAOL,KAAK,CAACM,GAAG,CACZ,sEAAsE,EACtEL,OACJ,CAAC;AACL;AAEA,OAAO,SAASM,sBAAsBA,CAAA,EAAG;EACrC,OAAOP,KAAK,CAACM,GAAG,CACZ,kEAAkE,EAClEL,OACJ,CAAC;AACL;AAEA,OAAO,SAASO,eAAeA,CAAA,EAAG;EAC9B,OAAOR,KAAK,CAACM,GAAG,CACZ,oEAAoE,EACpEL,OACJ,CAAC;AACL;AAEA,OAAO,SAASQ,eAAeA,CAAA,EAAG;EAC9B,OAAOT,KAAK,CAACM,GAAG,CACZ,mEAAmE,EACnEL,OACJ,CAAC;AACL;AAEA,OAAO,SAASS,cAAcA,CAAA,EAAG;EAC7B,OAAOV,KAAK,CAACM,GAAG,CACZ,mEAAmE,EACnEL,OACJ,CAAC;AACL;AAEA,OAAO,SAASU,kBAAkBA,CAACC,EAAE,EAAE;EACnC,OAAOZ,KAAK,CAACM,GAAG,CACZ,sCAAsCM,EAAE,iBAAiB,EACzDX,OACJ,CAAC;AACL;AAEA,OAAO,SAASY,kBAAkBA,CAACD,EAAE,EAAE;EACnC,OAAOZ,KAAK,CAACM,GAAG,CACZ,sCAAsCM,EAAE,yBAAyB,EACjEX,OACJ,CAAC;AACL;AAEA,OAAO,SAASa,qBAAqBA,CAACC,UAAU,EAAE;EAC9C,OAAOf,KAAK,CAACM,GAAG,CACZ,mDAAmDS,UAAU,4CAA4C,EACzGd,OACJ,CAAC;AACL;AAEA,OAAO,IAAIe,KAAK,GAAG,EAAE;AAErB,OAAO,eAAeC,mBAAmBA,CAAA,EAAG;EACxC;EACAD,KAAK,GAAGE,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,CAAC;;EAE1D;EACA,IAAI,CAACL,KAAK,EAAE;IACR,IAAI;MACA,MAAMM,QAAQ,GAAG,MAAMtB,KAAK,CAACM,GAAG,CAC5B,8DAA8D,EAC9DL,OACJ,CAAC;MACDe,KAAK,GAAGM,QAAQ,CAACC,IAAI,CAACC,MAAM;MAC5BJ,YAAY,CAACK,OAAO,CAAC,gBAAgB,EAAEP,IAAI,CAACQ,SAAS,CAACV,KAAK,CAAC,CAAC;IACjE,CAAC,CAAC,OAAOW,KAAK,EAAE;MACZC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,KAAK,CAAC;IAC/B;EACJ;AACJ;;AAEA;AACA,OAAO,SAASG,QAAQA,CAACC,IAAI,EAAE;EAC3B,OAAOA,IAAI,CACNC,GAAG,CAAEpB,EAAE,IAAK;IACT,MAAMqB,IAAI,GAAGjB,KAAK,CAACkB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACvB,EAAE,KAAKA,EAAE,CAAC;IAC3C,OAAOqB,IAAI,GAAGA,IAAI,CAACG,IAAI,GAAG,EAAE,CAAC,CAAC;EAClC,CAAC,CAAC,CACDC,MAAM,CAAED,IAAI,IAAKA,IAAI,CAAC,CAAC;EAAA,CACvBE,IAAI,CAAC,IAAI,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}