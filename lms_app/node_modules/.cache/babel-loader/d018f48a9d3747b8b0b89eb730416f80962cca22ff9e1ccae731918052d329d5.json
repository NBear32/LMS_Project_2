{"ast":null,"code":"import axios from \"axios\";\nconst api = axios.create({\n  baseURL: \"http://localhost:8080\",\n  withCredentials: true\n});\n\n// Lecture\nexport async function getAllLecture(search = \"\", category = \"\") {\n  try {\n    const queryParams = new URLSearchParams();\n    if (search) queryParams.append(\"search\", search);\n    if (category) queryParams.append(\"category\", category);\n    const response = await api.get(`/lecture?${queryParams.toString()}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error getLectures:\", error);\n  }\n}\nexport async function getCategoryLecture(keyword) {\n  try {\n    const response = await api.get(`/lecture/category/${keyword}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error getCategoryLecture:\", error);\n  }\n}\nexport async function getLecture(lectureId) {\n  try {\n    const response = await api.get(`/lecture/${lectureId}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error getLecture:\", error);\n  }\n}\nexport async function getLectureCategoryCountJPQL() {\n  try {\n    const response = await api.get(\"/lecture/categoryCount\");\n    return response.data;\n  } catch (error) {\n    console.error(\"Error getLectureCategoryCountJPQL:\", error);\n  }\n}\nexport async function saveLecture(lectureList) {\n  try {\n    const response = await api.post(\"/lecture/lectureList\", lectureList, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error saveLecture:\", error);\n  }\n}\n\n// Lecture_Progress\nexport async function updateLearningTime(lpSeq, learningTime) {\n  try {\n    const response = await api.put(`/progress/updateLearningTime/${lpSeq}/${learningTime}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error updateLearningTime:\", error);\n    throw error;\n  }\n}\nexport async function getAllLectureProgress() {\n  try {\n    const response = await api.get(\"/progress/getAllLectureProgress\");\n    return response.data;\n  } catch (error) {\n    console.error(\"Error getAllLectureProgress:\", error);\n    throw error;\n  }\n}\nexport async function getLectureProgressDetails(userId, lectureId) {\n  try {\n    const response = await api.get(`/lms/lecture/progress/${userId}/${lectureId}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error getLectureProgressDetails:\", error);\n    throw error;\n  }\n}","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","getAllLecture","search","category","queryParams","URLSearchParams","append","response","get","toString","data","error","console","getCategoryLecture","keyword","getLecture","lectureId","getLectureCategoryCountJPQL","saveLecture","lectureList","post","headers","updateLearningTime","lpSeq","learningTime","put","getAllLectureProgress","getLectureProgressDetails","userId"],"sources":["C:/Users/User/Documents/GitHub/lms_app/src/Api/LectureApi/LectureApi.js"],"sourcesContent":["import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"http://localhost:8080\",\n  withCredentials: true,\n});\n\n// Lecture\nexport async function getAllLecture(search = \"\", category = \"\") {\n  try {\n    const queryParams = new URLSearchParams();\n    if (search) queryParams.append(\"search\", search);\n    if (category) queryParams.append(\"category\", category);\n\n    const response = await api.get(`/lecture?${queryParams.toString()}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error getLectures:\", error);\n  }\n}\n\nexport async function getCategoryLecture(keyword) {\n  try {\n    const response = await api.get(`/lecture/category/${keyword}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error getCategoryLecture:\", error);\n  }\n}\n\nexport async function getLecture(lectureId) {\n  try {\n    const response = await api.get(`/lecture/${lectureId}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error getLecture:\", error);\n  }\n}\n\nexport async function getLectureCategoryCountJPQL() {\n  try {\n    const response = await api.get(\"/lecture/categoryCount\");\n    return response.data;\n  } catch (error) {\n    console.error(\"Error getLectureCategoryCountJPQL:\", error);\n  }\n}\n\nexport async function saveLecture(lectureList) {\n  try {\n    const response = await api.post(\"/lecture/lectureList\", lectureList, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error saveLecture:\", error);\n  }\n}\n\n// Lecture_Progress\nexport async function updateLearningTime(lpSeq, learningTime) {\n  try {\n    const response = await api.put(\n      `/progress/updateLearningTime/${lpSeq}/${learningTime}`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"Error updateLearningTime:\", error);\n    throw error;\n  }\n}\n\nexport async function getAllLectureProgress() {\n  try {\n    const response = await api.get(\"/progress/getAllLectureProgress\");\n    return response.data;\n  } catch (error) {\n    console.error(\"Error getAllLectureProgress:\", error);\n    throw error;\n  }\n}\n\nexport async function getLectureProgressDetails(userId, lectureId) {\n  try {\n    const response = await api.get(\n      `/lms/lecture/progress/${userId}/${lectureId}`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"Error getLectureProgressDetails:\", error);\n    throw error;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}