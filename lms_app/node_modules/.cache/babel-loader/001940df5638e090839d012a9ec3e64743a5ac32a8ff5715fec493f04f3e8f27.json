{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\React\\\\my_app\\\\src\\\\Components\\\\240723\\\\AvatarWrapper.js\";\nimport styled from \"styled-components\";\nimport { Avatar } from \"./Avatar\";\n\n// grid\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 50px;\n`;\n_c = Container;\nconst persons = [{\n  name: \"Steve\",\n  job: \"Programmer\",\n  country: \"대한민국\"\n}, {\n  name: \"Tom\",\n  job: \"Student\",\n  country: \"USA\"\n}, {\n  name: \"Adrian\",\n  job: \"Engineer\",\n  country: \"France\"\n}, {\n  name: \"Max\",\n  job: \"Painter\",\n  country: \"Germany\"\n}];\n\n// const {name, job, country} = 객체를 리턴하는 함수();\n// const [x0, x1, x2] = 배열을 리턴하는 함수();\n\nconst colors = [\"lightgreen\", \"teal\", \"lightgrey\", \"khaki\"];\nexport function AvatarWrapper() {\n  const [number, setNumber] = func1(10);\n  console.log(\"func1(10): \" + number);\n  setNumber(100);\n  console.log(\"setNumber(100): \" + number);\n  setNumber(200);\n  console.log(\"setNumber(200): \" + number);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [persons.map((p, i) => /*#__PURE__*/_jsxDEV(Avatar, {\n        person: p,\n        bgcolor: colors[i]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\uC5EC\\uAE30\\uB294 \\uC544\\uBC14\\uD0C0\\uC758 \\uB9E8 \\uB05D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_c2 = AvatarWrapper;\nfunction func1(value) {\n  let number = value;\n  function setNumber(newValue) {\n    number = newValue;\n  }\n  return [number, setNumber];\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"AvatarWrapper\");","map":{"version":3,"names":["styled","Avatar","jsxDEV","_jsxDEV","Fragment","_Fragment","Container","div","_c","persons","name","job","country","colors","AvatarWrapper","number","setNumber","func1","console","log","children","map","p","i","person","bgcolor","fileName","_jsxFileName","lineNumber","columnNumber","_c2","value","newValue","$RefreshReg$"],"sources":["C:/Users/admin/Documents/GitHub/React/my_app/src/Components/240723/AvatarWrapper.js"],"sourcesContent":["import styled from \"styled-components\";\r\nimport { Avatar } from \"./Avatar\";\r\n\r\n// grid\r\nconst Container = styled.div`\r\n    height: 100vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 50px;\r\n`;\r\n\r\nconst persons = [\r\n    {name: \"Steve\" , job: \"Programmer\", country: \"대한민국\"},\r\n    {name: \"Tom\"   , job: \"Student\"   , country: \"USA\"}     ,\r\n    {name: \"Adrian\", job: \"Engineer\"  , country: \"France\"}  ,\r\n    {name: \"Max\"   , job: \"Painter\"   , country: \"Germany\"} ,\r\n];\r\n\r\n// const {name, job, country} = 객체를 리턴하는 함수();\r\n// const [x0, x1, x2] = 배열을 리턴하는 함수();\r\n\r\nconst colors = [\"lightgreen\",\"teal\",\"lightgrey\",\"khaki\"];\r\n\r\nexport function AvatarWrapper() {\r\n\r\n    const [number, setNumber] = func1(10);\r\n    console.log(\"func1(10): \" + number);\r\n    \r\n    setNumber(100);\r\n    console.log(\"setNumber(100): \" + number);\r\n    \r\n    setNumber(200);\r\n    console.log(\"setNumber(200): \" + number);\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                {persons.map((p, i) => (\r\n                    <Avatar person={p} bgcolor={colors[i]} />\r\n                ))}\r\n                <div>여기는 아바타의 맨 끝</div>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction func1(value) {\r\n    let number = value;\r\n    function setNumber(newValue) {\r\n        number = newValue;\r\n    }\r\n    return [number, setNumber];\r\n}"],"mappings":";AAAA,OAAOA,MAAM,MAAM,mBAAmB;AACtC,SAASC,MAAM,QAAQ,UAAU;;AAEjC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,SAAS,GAAGN,MAAM,CAACO,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GANIF,SAAS;AAQf,MAAMG,OAAO,GAAG,CACZ;EAACC,IAAI,EAAE,OAAO;EAAGC,GAAG,EAAE,YAAY;EAAEC,OAAO,EAAE;AAAM,CAAC,EACpD;EAACF,IAAI,EAAE,KAAK;EAAKC,GAAG,EAAE,SAAS;EAAKC,OAAO,EAAE;AAAK,CAAC,EACnD;EAACF,IAAI,EAAE,QAAQ;EAAEC,GAAG,EAAE,UAAU;EAAIC,OAAO,EAAE;AAAQ,CAAC,EACtD;EAACF,IAAI,EAAE,KAAK;EAAKC,GAAG,EAAE,SAAS;EAAKC,OAAO,EAAE;AAAS,CAAC,CAC1D;;AAED;AACA;;AAEA,MAAMC,MAAM,GAAG,CAAC,YAAY,EAAC,MAAM,EAAC,WAAW,EAAC,OAAO,CAAC;AAExD,OAAO,SAASC,aAAaA,CAAA,EAAG;EAE5B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGC,KAAK,CAAC,EAAE,CAAC;EACrCC,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGJ,MAAM,CAAC;EAEnCC,SAAS,CAAC,GAAG,CAAC;EACdE,OAAO,CAACC,GAAG,CAAC,kBAAkB,GAAGJ,MAAM,CAAC;EAExCC,SAAS,CAAC,GAAG,CAAC;EACdE,OAAO,CAACC,GAAG,CAAC,kBAAkB,GAAGJ,MAAM,CAAC;EAExC,oBACIZ,OAAA,CAAAE,SAAA;IAAAe,QAAA,eACIjB,OAAA,CAACG,SAAS;MAAAc,QAAA,GACLX,OAAO,CAACY,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,kBACdpB,OAAA,CAACF,MAAM;QAACuB,MAAM,EAAEF,CAAE;QAACG,OAAO,EAAEZ,MAAM,CAACU,CAAC;MAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAC3C,CAAC,eACF1B,OAAA;QAAAiB,QAAA,EAAK;MAAY;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB;EAAC,gBACd,CAAC;AAEX;AAACC,GAAA,GArBehB,aAAa;AAuB7B,SAASG,KAAKA,CAACc,KAAK,EAAE;EAClB,IAAIhB,MAAM,GAAGgB,KAAK;EAClB,SAASf,SAASA,CAACgB,QAAQ,EAAE;IACzBjB,MAAM,GAAGiB,QAAQ;EACrB;EACA,OAAO,CAACjB,MAAM,EAAEC,SAAS,CAAC;AAC9B;AAAC,IAAAR,EAAA,EAAAsB,GAAA;AAAAG,YAAA,CAAAzB,EAAA;AAAAyB,YAAA,CAAAH,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}