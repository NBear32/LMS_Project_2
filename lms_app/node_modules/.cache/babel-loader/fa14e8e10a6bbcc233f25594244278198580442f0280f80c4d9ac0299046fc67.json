{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\lms_app\\\\src\\\\Components\\\\LMS\\\\Chatroom\\\\Chatroom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"../../../Styles/Chatroom.css\";\nimport styled, { keyframes } from \"styled-components\";\nimport { LeftSidebar } from \"../Sidebar\";\nimport { Navbar } from \"../Navbar\";\nimport axios from \"axios\";\n\n// API 엔드포인트\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst urlCurrent = \"http://localhost:8080/user/current\"; // 세션 조회\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`;\nconst Container = styled.div`\n    box-sizing: border-box;\n    padding: 176px 50px 0 240px;\n    transition: all 0.3s;\n    display: grid;\n    grid-template-columns: 70% 30%;\n    animation: ${fadeIn} 0.6s ease-out;\n    width: 100%;\n`;\n_c = Container;\nexport function Chatroom() {\n  _s();\n  // [상태 변수]\n  // messages: 채팅 메시지 배열\n  // input: 입력창의 텍스트\n  // userId: 현재 사용자 ID\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [userId, setUserId] = useState(null); // User ID 데이터\n\n  // [참조 변수]\n  // messagesEndRef: 메시지 목록의 끝을 참조하여 스크롤을 조정\n  // socketRef: WebSocket 연결을 저장\n  const messagesEndRef = useRef(null);\n  const socketRef = useRef(null); // WebSocket을 저장할 ref\n\n  // fetchUserData 함수는 API를 통해 사용자 ID를 조회하고 상태를 업데이트\n  const fetchUserData = async () => {\n    try {\n      const {\n        data\n      } = await axios.get(urlCurrent, {\n        withCredentials: true\n      }); // 세션 User ID 조회\n      setUserId(data.userId);\n    } catch (error) {\n      console.error(\"Error fetching user data:\", error);\n    }\n  };\n\n  // WebSocket 연결 설정:\n  // 컴포넌트가 마운트되면 WebSocket 연결을 설정, 서버로부터 메시지를 수신하여 messages 상태를 업데이트함.\n  // 컴포넌트가 언마운트될 때 WebSocket 연결을 닫음.\n  useEffect(() => {\n    fetchUserData(); // 컴포넌트 마운트 시 사용자 데이터 로드\n\n    // WebSocket 연결 설정\n    // socketRef.current = new WebSocket(\"ws://localhost:8080\");\n    // socketRef.current = new WebSocket(\"ws://localhost:3000\");\n    socketRef.current = new WebSocket(\"ws://localhost:3001\");\n    socketRef.current.onmessage = event => {\n      const newMessage = JSON.parse(event.data);\n      setMessages(prevMessages => [...prevMessages, newMessage]);\n    };\n    return () => {\n      socketRef.current.close();\n    };\n  }, []);\n\n  // 메시지 전송:\n  // 폼 제출 시 handleSubmit 함수가 호출됨\n  // 입력이 비어있지 않고 사용자 ID가 있는 경우, WebSocket을 통해 메시지를 전송\n  // WebSocket 연결이 열려 있지 않으면 경고를 표시\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (input.trim() !== \"\" && userId !== null) {\n      const message = {\n        text: input,\n        userId: userId\n      }; // 사용자 이름 추가\n\n      if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n        socketRef.current.send(JSON.stringify(message));\n        setInput(\"\");\n      } else {\n        window.alert(\"WebSocket connection is not open. Message not sent.\");\n        console.warn(\"WebSocket connection is not open. Message not sent.\");\n      }\n    }\n  };\n\n  // 메시지 목록 스크롤:\n  // 새로운 메시지가 추가될 때, 메시지 목록의 끝으로 자동 스크롤 이동\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LeftSidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-room\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message\",\n            children: [\"[\", msg.userId || \"Unknown\", \"] \", msg.text, \" \"]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          className: \"input-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: input,\n            onChange: e => setInput(e.target.value),\n            placeholder: \"Type a message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Chatroom, \"AsR9RVUZmu0EDCFJpDuKCqKzw0I=\");\n_c2 = Chatroom;\nexport default Chatroom;\nvar _c, _c2;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Chatroom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","keyframes","LeftSidebar","Navbar","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","urlCurrent","fadeIn","Container","div","_c","Chatroom","_s","messages","setMessages","input","setInput","userId","setUserId","messagesEndRef","socketRef","fetchUserData","data","get","withCredentials","error","console","current","WebSocket","onmessage","event","newMessage","JSON","parse","prevMessages","close","handleSubmit","preventDefault","trim","message","text","readyState","OPEN","send","stringify","window","alert","warn","_messagesEndRef$curre","scrollIntoView","behavior","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","msg","index","ref","onSubmit","type","value","onChange","e","target","placeholder","_c2","$RefreshReg$"],"sources":["C:/Users/User/Documents/GitHub/lms_app/src/Components/LMS/Chatroom/Chatroom.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"../../../Styles/Chatroom.css\";\n\nimport styled, { keyframes } from \"styled-components\";\nimport { LeftSidebar } from \"../Sidebar\";\nimport { Navbar } from \"../Navbar\";\n\nimport axios from \"axios\";\n\n// API 엔드포인트\nconst urlCurrent = \"http://localhost:8080/user/current\"; // 세션 조회\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n`;\n\nconst Container = styled.div`\n    box-sizing: border-box;\n    padding: 176px 50px 0 240px;\n    transition: all 0.3s;\n    display: grid;\n    grid-template-columns: 70% 30%;\n    animation: ${fadeIn} 0.6s ease-out;\n    width: 100%;\n`;\n\nexport function Chatroom() {\n    // [상태 변수]\n    // messages: 채팅 메시지 배열\n    // input: 입력창의 텍스트\n    // userId: 현재 사용자 ID\n    const [messages, setMessages] = useState([]);\n    const [input, setInput] = useState(\"\");\n    const [userId, setUserId] = useState(null); // User ID 데이터\n\n    // [참조 변수]\n    // messagesEndRef: 메시지 목록의 끝을 참조하여 스크롤을 조정\n    // socketRef: WebSocket 연결을 저장\n    const messagesEndRef = useRef(null);\n    const socketRef = useRef(null); // WebSocket을 저장할 ref\n\n    // fetchUserData 함수는 API를 통해 사용자 ID를 조회하고 상태를 업데이트\n    const fetchUserData = async () => {\n        try {\n            const { data } = await axios.get(urlCurrent, {\n                withCredentials: true,\n            }); // 세션 User ID 조회\n            setUserId(data.userId);\n        } catch (error) {\n            console.error(\"Error fetching user data:\", error);\n        }\n    };\n\n    // WebSocket 연결 설정:\n    // 컴포넌트가 마운트되면 WebSocket 연결을 설정, 서버로부터 메시지를 수신하여 messages 상태를 업데이트함.\n    // 컴포넌트가 언마운트될 때 WebSocket 연결을 닫음.\n    useEffect(() => {\n        fetchUserData(); // 컴포넌트 마운트 시 사용자 데이터 로드\n\n        // WebSocket 연결 설정\n        // socketRef.current = new WebSocket(\"ws://localhost:8080\");\n        // socketRef.current = new WebSocket(\"ws://localhost:3000\");\n        socketRef.current = new WebSocket(\"ws://localhost:3001\");\n\n        socketRef.current.onmessage = (event) => {\n            const newMessage = JSON.parse(event.data);\n            setMessages((prevMessages) => [...prevMessages, newMessage]);\n        };\n\n        return () => {\n            socketRef.current.close();\n        };\n    }, []);\n\n    // 메시지 전송:\n    // 폼 제출 시 handleSubmit 함수가 호출됨\n    // 입력이 비어있지 않고 사용자 ID가 있는 경우, WebSocket을 통해 메시지를 전송\n    // WebSocket 연결이 열려 있지 않으면 경고를 표시\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if (input.trim() !== \"\" && userId !== null) {\n            const message = { text: input, userId: userId }; // 사용자 이름 추가\n\n            if (\n                socketRef.current &&\n                socketRef.current.readyState === WebSocket.OPEN\n            ) {\n                socketRef.current.send(JSON.stringify(message));\n                setInput(\"\");\n            } else {\n                window.alert(\n                    \"WebSocket connection is not open. Message not sent.\"\n                );\n                console.warn(\n                    \"WebSocket connection is not open. Message not sent.\"\n                );\n            }\n        }\n    };\n\n    // 메시지 목록 스크롤:\n    // 새로운 메시지가 추가될 때, 메시지 목록의 끝으로 자동 스크롤 이동\n    useEffect(() => {\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }, [messages]);\n\n    return (\n        <>\n            <Navbar />\n            <LeftSidebar />\n            <Container>\n                <div className=\"chat-room\">\n                    <div className=\"messages\">\n                        {messages.map((msg, index) => (\n                            <div key={index} className=\"message\">\n                                [{msg.userId || \"Unknown\"}] {msg.text}{\" \"}\n                                {/* 사용자 ID가 없으면 \"Unknown\" 표시 */}\n                            </div>\n                        ))}\n                        <div ref={messagesEndRef} />\n                    </div>\n                    <form onSubmit={handleSubmit} className=\"input-form\">\n                        <input\n                            type=\"text\"\n                            value={input}\n                            onChange={(e) => setInput(e.target.value)}\n                            placeholder=\"Type a message\"\n                        />\n                        <button type=\"submit\">Send</button>\n                    </form>\n                </div>\n            </Container>\n        </>\n    );\n}\n\nexport default Chatroom;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}