{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\React\\\\my_app\\\\src\\\\Components\\\\240724\\\\OpenWeather.js\",\n  _s = $RefreshSig$();\nimport styled from \"styled-components\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n`;\n_c = Container;\nconst Card = styled.div`\n    width: 500px;\n    height: 300px;\n    // 웹페이지 색은 단색 보다는 gradient 가 좋음\n    // background: linear-gradient(90deg, lightblue, dodgerblue);\n    background: linear-gradient(90deg, #ff7e5f, #feb47b);\n    color: white;\n    border-radius: 10px; // 모서리 라운드\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    padding: 30px;\n`;\n_c2 = Card;\nconst Search = styled.div`\n    width: 500px;\n    height: 30px;\n    display: grid;\n    grid-template-columns: 7fr 2fr;\n    margin: 20px;\n`;\n_c3 = Search;\nconst Icon = styled.div`\n    text-align: center;\n    img {\n        width: 100%;\n        margin-top: 20px;\n    }\n`;\n_c4 = Icon;\nconst Weather = styled.div`\n    display: flex;\n    flex-direction: column;\n    text-align: end; // 오른쪽 정렬\n`;\n_c5 = Weather;\nconst Temp = styled.div`\n    margin-top: 20px;\n    font-size: 5rem;\n    i {\n        font-size: 3.5rem;\n    }\n`;\n_c6 = Temp;\nconst City = styled.div`\n    font-size: 2.5rem;\n`;\n_c7 = City;\nconst Info = styled.div`\n    font-size: 1.5rem;\n    margin-top: 30px;\n`;\n_c8 = Info;\nexport function OpenWeather() {\n  _s();\n  const API_KEY = \"b5c0480ce07be15b9bd84a3754bee904\";\n  const [api, setAPI] = useState(\"\");\n  const [data, setData] = useState(\"\");\n  async function sendAPI() {\n    try {\n      const response = await axios.get(api, {\n        headers: {\n          \"X-Api-Key\": API_KEY_NINJA\n        }\n      });\n      console.log(response.data);\n      setData(JSON.stringify(response.data, null, 2)); // value, replacer, space\n    } catch (error) {\n      console.log(\"요청이 실패하였습니다\", error);\n    }\n  }\n  const [icon, setIcon] = useState(\"\");\n  const [temp, setTemp] = useState(0);\n  const [city, setCity] = useState(\"\");\n  const [weather, setWeather] = useState(\"\");\n\n  // // useEffect 를 사용 빈 배열 처리를 해야 처음 한번만 처리됨\n  // useEffect(() => {\n  //     setIcon(\"@4d\");\n  //     setTemp(28);\n  //     setCity(\"Daejeon\");\n  //     setWeather(\"Clouds\");\n  // }, []);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(geoOK, geoError);\n  }, []); // 최초 1회만\n\n  // Async ~ await 방식의 비동기 코드는 반드시 함수안에서 실행되어야 하고\n  // 함수선언문 앞에 async 키워드가 필요함.\n  async function geoOK(position) {\n    async function setAPI() {}\n    const lat = position.coords.latitude;\n    const lon = position.coords.longitude;\n    // const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n\n    const cityName = \"seoul\";\n    const urlCity = `https://api.openweathermap.org/data/2.5/find?q=${cityName}&appid=${API_KEY}&units=metric`;\n\n    // 1. Axios 사용법(Async ~ await) => 콜백을 사용하지 않음, 일반 함수처럼 사용, 들어 있는 함수 앞에 async 를 붙여야 함, 일반적으로 try catch 구분 사용\n    // geoOK 만 멈춰 있음, thread 를 따로 만듬.\n    // 여러개의 API 를 사용하는 경우 바로 밑에 await axios 를 사용하면 처리됨\n    try {\n      //const response = await axios.get(url);\n      const response = await axios.get(urlCity);\n      const data = response.data;\n      console.log(\"OpenWeatherMap Response: \" + data);\n      setCity(data.list[0].name);\n      setTemp(parseInt(data.list[0].main.temp));\n      setIcon(data.list[0].weather[0].icon);\n      setWeather(data.list[0].weather[0].main);\n    } catch (error) {\n      console.log(\"요청이 실패했습니다.\", error);\n    }\n\n    // 2. Axios 사용법(Promise ~ then), .then (콜백)\n    // axios\n    //     .get(url)\n    //     .then((response) => {\n    //         const data = response.data;\n\n    //         console.log(data);\n    //         setCity(data.name);\n    //         setTemp(parseInt(data.main.temp));\n    //         setIcon(data.weather[0].icon);\n    //         setWeather(data.weather[0].main);\n    //     })\n    //     .catch((error) => {\n    //         console.log(\"요청이 실패했습니다.\", error);\n    //     });\n\n    // 오래된 버전에서는 지원 안할수 있음\n    // 3. fetch 사용법\n    // fetch(url)\n    //     .then((response) => {\n    //         return response.json();\n    //     })\n    //     .then((data) => {\n    //         console.log(data);\n    //         setCity(data.name);\n    //         setTemp(parseInt(data.main.temp));\n    //         setIcon(data.weather[0].icon);\n    //         setWeather(data.weather[0].main);\n    //     })\n    //     .catch((error) => {\n    //         console.log(\"요청이 실패했습니다.\", error);\n    //     });\n  }\n  function geoError() {\n    alert(\"현재 위치정보를 찾을 수 없습니다.\");\n  }\n  const [Items, setItems] = useState([]); // 배열 초기값 빈배열\n  const [newInputItem, setNewInputItem] = useState(\"\"); // 문자열 초기값 \"\"\n\n  function addItem() {\n    const temp = [...Items, newInputItem];\n    setItems(temp);\n    setNewInputItem(\"\");\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(Icon, {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `https://openweathermap.org/img/wn/${icon}@2x.png`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Weather, {\n          children: [/*#__PURE__*/_jsxDEV(Temp, {\n            children: [temp, /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"ti ti-temperature-celsius\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(City, {\n            children: city\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Info, {\n            children: weather\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Search, {\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"\\uB3C4\\uC2DC \\uC774\\uB984\\uC744 \\uC601\\uC5B4\\uB85C \\uC785\\uB825\\uD574 \\uC8FC\\uC138\\uC694\",\n          onChange: e => setAPI(e.target.value),\n          value: api\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: sendAPI,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(OpenWeather, \"NRWJdGVwtlW1zhv/ZFew6Om2v9A=\");\n_c9 = OpenWeather;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Card\");\n$RefreshReg$(_c3, \"Search\");\n$RefreshReg$(_c4, \"Icon\");\n$RefreshReg$(_c5, \"Weather\");\n$RefreshReg$(_c6, \"Temp\");\n$RefreshReg$(_c7, \"City\");\n$RefreshReg$(_c8, \"Info\");\n$RefreshReg$(_c9, \"OpenWeather\");","map":{"version":3,"names":["styled","useEffect","useState","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Container","div","_c","Card","_c2","Search","_c3","Icon","_c4","Weather","_c5","Temp","_c6","City","_c7","Info","_c8","OpenWeather","_s","API_KEY","api","setAPI","data","setData","sendAPI","response","get","headers","API_KEY_NINJA","console","log","JSON","stringify","error","icon","setIcon","temp","setTemp","city","setCity","weather","setWeather","navigator","geolocation","getCurrentPosition","geoOK","geoError","position","lat","coords","latitude","lon","longitude","cityName","urlCity","list","name","parseInt","main","alert","Items","setItems","newInputItem","setNewInputItem","addItem","children","src","fileName","_jsxFileName","lineNumber","columnNumber","className","Input","placeholder","onChange","e","target","value","Button","onClick","_c9","$RefreshReg$"],"sources":["C:/Users/admin/Documents/GitHub/React/my_app/src/Components/240724/OpenWeather.js"],"sourcesContent":["import styled from \"styled-components\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst Container = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst Card = styled.div`\r\n    width: 500px;\r\n    height: 300px;\r\n    // 웹페이지 색은 단색 보다는 gradient 가 좋음\r\n    // background: linear-gradient(90deg, lightblue, dodgerblue);\r\n    background: linear-gradient(90deg, #ff7e5f, #feb47b);\r\n    color: white;\r\n    border-radius: 10px; // 모서리 라운드\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    padding: 30px;\r\n`;\r\n\r\nconst Search = styled.div`\r\n    width: 500px;\r\n    height: 30px;\r\n    display: grid;\r\n    grid-template-columns: 7fr 2fr;\r\n    margin: 20px;\r\n`;\r\n\r\nconst Icon = styled.div`\r\n    text-align: center;\r\n    img {\r\n        width: 100%;\r\n        margin-top: 20px;\r\n    }\r\n`;\r\n\r\nconst Weather = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    text-align: end; // 오른쪽 정렬\r\n`;\r\n\r\nconst Temp = styled.div`\r\n    margin-top: 20px;\r\n    font-size: 5rem;\r\n    i {\r\n        font-size: 3.5rem;\r\n    }\r\n`;\r\n\r\nconst City = styled.div`\r\n    font-size: 2.5rem;\r\n`;\r\n\r\nconst Info = styled.div`\r\n    font-size: 1.5rem;\r\n    margin-top: 30px;\r\n`;\r\n\r\n\r\n\r\n\r\n\r\nexport function OpenWeather() {\r\n    const API_KEY = \"b5c0480ce07be15b9bd84a3754bee904\";\r\n\r\n    const [api, setAPI] = useState(\"\");\r\n    const [data, setData] = useState(\"\");\r\n\r\n    async function sendAPI() {\r\n        try {\r\n            const response = await axios.get(api, {\r\n                headers: {\r\n                    \"X-Api-Key\": API_KEY_NINJA,\r\n                },\r\n            });\r\n            console.log(response.data);\r\n\r\n            setData(JSON.stringify(response.data, null, 2)); // value, replacer, space\r\n        } catch (error) {\r\n            console.log(\"요청이 실패하였습니다\", error);\r\n        }\r\n    }\r\n\r\n    const [icon, setIcon] = useState(\"\");\r\n    const [temp, setTemp] = useState(0);\r\n    const [city, setCity] = useState(\"\");\r\n    const [weather, setWeather] = useState(\"\");\r\n\r\n    // // useEffect 를 사용 빈 배열 처리를 해야 처음 한번만 처리됨\r\n    // useEffect(() => {\r\n    //     setIcon(\"@4d\");\r\n    //     setTemp(28);\r\n    //     setCity(\"Daejeon\");\r\n    //     setWeather(\"Clouds\");\r\n    // }, []);\r\n\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(geoOK, geoError);\r\n    }, []); // 최초 1회만\r\n\r\n    // Async ~ await 방식의 비동기 코드는 반드시 함수안에서 실행되어야 하고\r\n    // 함수선언문 앞에 async 키워드가 필요함.\r\n    async function geoOK(position) {\r\n\r\n    async function setAPI() {}\r\n\r\n        const lat = position.coords.latitude;\r\n        const lon = position.coords.longitude;\r\n        // const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\r\n\r\n        const cityName = \"seoul\";\r\n        const urlCity = `https://api.openweathermap.org/data/2.5/find?q=${cityName}&appid=${API_KEY}&units=metric`;\r\n\r\n        // 1. Axios 사용법(Async ~ await) => 콜백을 사용하지 않음, 일반 함수처럼 사용, 들어 있는 함수 앞에 async 를 붙여야 함, 일반적으로 try catch 구분 사용\r\n        // geoOK 만 멈춰 있음, thread 를 따로 만듬.\r\n        // 여러개의 API 를 사용하는 경우 바로 밑에 await axios 를 사용하면 처리됨\r\n        try {\r\n            //const response = await axios.get(url);\r\n            const response = await axios.get(urlCity);\r\n            const data = response.data;\r\n\r\n            console.log(\"OpenWeatherMap Response: \" + data);\r\n\r\n            setCity(data.list[0].name);\r\n            setTemp(parseInt(data.list[0].main.temp));\r\n            setIcon(data.list[0].weather[0].icon);\r\n            setWeather(data.list[0].weather[0].main);\r\n        } catch (error) {\r\n            console.log(\"요청이 실패했습니다.\", error);\r\n        }\r\n\r\n        // 2. Axios 사용법(Promise ~ then), .then (콜백)\r\n        // axios\r\n        //     .get(url)\r\n        //     .then((response) => {\r\n        //         const data = response.data;\r\n\r\n        //         console.log(data);\r\n        //         setCity(data.name);\r\n        //         setTemp(parseInt(data.main.temp));\r\n        //         setIcon(data.weather[0].icon);\r\n        //         setWeather(data.weather[0].main);\r\n        //     })\r\n        //     .catch((error) => {\r\n        //         console.log(\"요청이 실패했습니다.\", error);\r\n        //     });\r\n\r\n        // 오래된 버전에서는 지원 안할수 있음\r\n        // 3. fetch 사용법\r\n        // fetch(url)\r\n        //     .then((response) => {\r\n        //         return response.json();\r\n        //     })\r\n        //     .then((data) => {\r\n        //         console.log(data);\r\n        //         setCity(data.name);\r\n        //         setTemp(parseInt(data.main.temp));\r\n        //         setIcon(data.weather[0].icon);\r\n        //         setWeather(data.weather[0].main);\r\n        //     })\r\n        //     .catch((error) => {\r\n        //         console.log(\"요청이 실패했습니다.\", error);\r\n        //     });\r\n    }\r\n\r\n    function geoError() {\r\n        alert(\"현재 위치정보를 찾을 수 없습니다.\");\r\n    }\r\n\r\n    const [Items, setItems] = useState([]); // 배열 초기값 빈배열\r\n    const [newInputItem, setNewInputItem] = useState(\"\"); // 문자열 초기값 \"\"\r\n\r\n    function addItem() {\r\n        const temp = [...Items, newInputItem];\r\n        setItems(temp);\r\n        setNewInputItem(\"\");\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                {/* 왼쪽 아이콘, 오른쪽 위 온도, 아래 도시 */}\r\n                <Card>\r\n                    <Icon>\r\n                        <img\r\n                            src={`https://openweathermap.org/img/wn/${icon}@2x.png`}\r\n                        />\r\n                    </Icon>\r\n                    <Weather>\r\n                        <Temp>\r\n                            {temp}\r\n                            <i className=\"ti ti-temperature-celsius\"></i>\r\n                        </Temp>\r\n                        <City>{city}</City>\r\n                        <Info>{weather}</Info>\r\n                    </Weather>\r\n                </Card>\r\n                <Search>\r\n                    <Input\r\n                        placeholder=\"도시 이름을 영어로 입력해 주세요\"\r\n                        onChange={(e) => setAPI(e.target.value)}\r\n                        value={api}\r\n                    />\r\n                    <Button onClick={sendAPI}>Search</Button>\r\n                    {/* <Response>{data}</Response> */}\r\n                </Search>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}